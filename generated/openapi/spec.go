// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZW2/bthf/KgT/f2Avji9t9jA/rWvTIduwFk27DkiDgpaOLXYSyR4eOTECf/eBpOSL",
	"LrZrx06H9ikGJZ7r73cuyj2PdGa0AkWWD++5jRLIhP/5HEEQXIGykuQU3kCkMX4Dn3Ow5J4b1AaQJPi3",
	"MyARCxLuN9yJzKTAh9zqDJhUY42ZIKkVEyOdE7OlUIZeKu9wmhl/gVCqCZ+XB/f8/whjPuT/6y0N7RVW",
	"9irGvZ0ZuFB5xufzDkf4nEuEmA+vg6zO0sabhT49+gQROX0t7lqjlYW6vzJe83TQX4iUimAC6GR+1UGR",
	"Cw1bInOBqLE9EuAe+18x2AilcT7xYXHOstwSsyaVxEYz9uEDMjvLRjqtu1exr5DbZNEf0tLOmVrE9WOI",
	"a0gfQWa/MJLLBHCBKGY1i+uadjTe5Wh3Bz46kXt74XR9sSeFykZ39ESqdxawtTQYYe2ti98aC8rTQRPO",
	"cwuoRAbrV8rTwVbsLO53ltq3GN8WfdL/gPI/NmoMrzXpeAMTaQnwoWOEYFzFij9+JfFtsqgpHlVWfcul",
	"tYmbW+PRFI4ymQ9mvRe4o8leijPR/73mRswyUHQWiRBquCPe4SOpBM54h0cIMSiSIl1RsAI0C1GOkmZX",
	"zu4QApFT4v6OQCDgS59ePuS/vX/LO2FmcTLC02VyEyLD506kg4S7H2lFIvL8g0zI1AVxorErp0LpaVfS",
	"z+60i7nzNJURFCUhhJe/1MggziOPLQ8aSR53V7diMgFkv2qT/A5gANkZe2VAPXt9yZ52+7zDp4A2NMZB",
	"t9/tu9vagBJG8iF/2u13n3oyUeId7qWuMnks6FAv1purL1zM0ZBJxSiBVdVTKVjJUCZUzFY46oDlzb+M",
	"+ZC/1pa8KB4gAJZ+0fGsDBUor1oYk8rgdO+T1Wo5KG6DXK05zNfBRpiDPwjV17v+pN8/hv6ivnsD1mN5",
	"lUcRWDvOU7aIDu/wBEQMYbD5++zizkgEe/ZsTID1dMSCXN1h794+Z7cJKObbAYNwq8SoN3dcgtfdOSPp",
	"i2iVBM7I8weMw/oI1xCDSzUVqYwXsOmVkGE2d1rBTz/n/cEpTYo0IkS0gC/TuMR1rMGqH4jBnbS+MP0Y",
	"4lUVQu79lPlpkmnFLODU1UxXaPIscyVplU4uGWJiyyZn+Y17s4dFE29nZNnmH4aUpbQj8bJpJtmdmq30",
	"KaNUouURACyVySlo/+l02i8cCGFJn0PxuAamFki2rwUTaMQn5agsE8yP/EyPa2MRCxKqeGxZWCw/ZuHe",
	"siTtWsYPzkMIWmukysRUX2hL0kH5se4wyhFBUYmMrak6dZr2SdFJ+8qfmrlx0k2gQUFo1ntCpZhV+fC6",
	"nFKvb+Y3u2BoG3w6LY3mdSoiYIIpuK3jstZ3GrtLdQU7TpPZ+AFxXrSbNWAOjq17H2g+bhP7Oohx/uTJ",
	"6ez4y8UgGAB3EZgDCvl2dgagtNBpnwLfu5fxPNiZAkHd4hf+nIk0ZbEg0diIbyUlzAuq0jfcrgD7vaTk",
	"8oXfH1FkQH5tub7nboP0O2W50A/Dcr8+5a1uJ9UvCy5YFZKebxwBv526XuRxY+421/cNc8A+0HgJFCWP",
	"iYxNlVJHBHRmCUFk60lfLMSLD0S1bfi/NkecB5KczI5mkJSTooyPPtt4tI41HsKG5mnnnUm1iFnARjsr",
	"SO8x97wQJI5HjV0GqoNY8X1++j4/Pfr8tBs/tw1SXpdTGyiYY1p8vrfDXi/VkUgTbaknjOROfSGr6sur",
	"Eni2+L9PsSMXLA4fT+adDdd8tWpa1AoR9Ufzm/m/AQAA///MCV+YRCEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
