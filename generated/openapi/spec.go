// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+VwhuwF7kX232MD+ta9Mh27AWTbsOSI2Cls4WO4lkjycnRqD/fSAp2ZYl",
	"21kaJxnaJxuUeHe8+76Pd7rmsc6NVqDI8vE1t3EKufB/nyMIgnNQVpJcwBuINSZv4HMBltxzg9oAkgT/",
	"dg4kEkHC/YcrkZsM+JhbnQOTaqYxFyS1YmKqC2K2NsrQW+URp6XxGwilmvOyXrjm3yPM+Jh/N1gHOqii",
	"HGwF93Zp4FQVOS/LiCN8LiRCwscXwVa0jnGy8qennyAm52/Hca3RykL7vDJpnHQ0XJmUimAO6Gw+6qTI",
	"lYcDmTlF1Lg7E+Ae+38J2BilcWfi42qd5YUlZk0miU2X7MMHZHaZT3XWPt5WfJXdroj+kJZuXKlVXj+G",
	"vIbyEeT2P2ZyXQAuEMWyFXHbU2fwei7VOwu4k0tGWHvpHDZgU6+OuoBRWEAlcmhuqVdHB5O92h+tvR8I",
	"fle+Sf8Dyv/Z6zG81uXjDcylJcC7zhGCcRRPPj6S/HZF1JWPbRh+zVq0y6A7lP+94EYsc1DUi0WIG66I",
	"R3wqlcAlj3iMkIAiKbINBxtVsxAXKGl57o4Q8isKSt3vFAQCvvS54mP+2/u3PAo3prMRnq4zlRIZXjqT",
	"Lr9uf6wVidiDGXIhM1eguca+XAilF31JP7vVPhbupJmMoeJXAB5/qZFBUsS+UL4CknwRzy/FfA7IftUm",
	"/R3AALIee2VAPXt9xp72hzziC0AbZHnUH/aHbrc2oISRfMyf9of9px6ZlPoDDzJHcw80HcjXlHavAsxh",
	"mknFKIVN1wspWA13JlTCNgDvUOvDP0v4mL/WlrwpHtAAln7RybJOFSjvWhiTyXDowSer1bpNOYS+ltKW",
	"TdwRFuAXgpT5oz8ZDo/hvxJLH0Azl+dFHIO1syJjq+zwiKcgEgjX6t+90ysjEWzv2YwA2+VIBDkSs3dv",
	"n7PLFBTz2sog7Kox6sOd1eB1e3okvSJtk8AFeXKHeWg2EB05OFMLkclkBZtBDRlmC+cV/N17MhzdZ0ix",
	"RoSYVvBlGte4TjRY9QMxuJLWC9OPIV/bRsi9nzHfyzCtmAVcOD12QlPkuZOkTTq5Yoi5rW8MyyfuzQFW",
	"N+JuRtZ35t2QsrZ2JF52XfA3p+ZO+tRZqtHyAACWyhQUvP90f95PHQhhTZ8vxWMDTDsg2dlVz6ETmlSg",
	"skww3zUzPWu1F9YtxgUiKKqdNlHZ0fFbfkzp3jNh3FTE71uy/tTMdSquuQkOwj1wSzRUbRAfX9QN0MWk",
	"nDRhEgrbquYGZNrPJmW0Q8NeZyIGJpiCy5bNtqR1Ctd2q3wc/dr7ZaSslKwBzNGxfd8Gmg+rj4+DGCdP",
	"ntxfHH+5HIQA4CoGU5fiKOwMQNlBpwMM7RT4wbVMyhBnBgTtiF/4dSayjLn5rUvo2aWklHlD2/QNu7eA",
	"/V5SevbCjyYociDfEV9cczec+HGFR/V0JGu2rxuIzcZ3eyB2ydoi6cne7uLr0fWqjntrt1/f9/QBt4HG",
	"S6A4fUhk7FNKHRNQzxKCyJtFX81aq28PrUHr/9ZHnASS3Fsc3SCpO0WZHL238WidafwSNnR3O+9MpkXC",
	"AjZ2s4L0LfqeF4LE8ahxk4bqi1jxrX/61j89eP90M34eaqS8L+c2ULDArPoybMeDQaZjkaXa0kAYyZ37",
	"ytb2WV7VwLPV9/lqRq5YHObyMtqzzatV16BWmWg/KiflvwEAAP//Tv/aAx0eAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
