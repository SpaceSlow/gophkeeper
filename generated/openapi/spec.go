// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUW/bNhD+KwQ3YC+K7TTZw/y0rk2HbMNaNO06IA0KWjpb7CSSPZ6cGIH++0BSsi1L",
	"stO0djKsTxYo8e54930fj/Qtj3VutAJFlo9vuY1TyIV/fIYgCC5AWUlyDq8h1pi8hk8FWHLvDWoDSBL8",
	"1zmQSAQJ9ww3IjcZ8DG3Ogcm1VRjLkhqxcREF8RsbZSht8ojTgvjJxBKNeNlPXDLv0eY8jH/brgKdFhF",
	"OdwI7s3CwJkqcl6WEUf4VEiEhI8vg61oFePV0p+efISYnL+e5VqjlYX2emXSWOnxaGlSKoIZoLP5qJMi",
	"lx52ZOYMUWN/JsC99k8J2BilcWvi42qc5YUlZk0miU0W7P17ZHaRT3TWXt5GfJXdroj+kJbuXKllXj+E",
	"vIbyEeT2MzO5KgAXiGLRirjtqTN4PZPqrQXs5ZIR1l47hw3Y1KPHXcAoLKASOTSn1KPHO5O9nB+tvO8I",
	"vi/fpP8B5R+2egyfdfl4DTNpCfBr5wjBOIonHx5Jfrsi6srHJgz/z1rUZ9Atyv9eciMWOSg6ikWIG26I",
	"R3wilcAFj3iMkIAiKbI1B2tVsxAXKGlx4ZYQ8isKSt3vBAQCvvC54mP+27s3PAo7prMR3q4ylRIZXjqT",
	"Lr9ufqwVidiDGXIhM1egmcaBnAul5wNJP7vRARZupZmMoeJXAB5/oZFBUsS+UL4CknwRL67FbAbIftUm",
	"/R3AALIj9tKAevrqnJ0MRjzic0AbZPl4MBqM3GxtQAkj+ZifDEaDE49MSv2Ch5mjuQeaDuRrSrtXAeYw",
	"zaRilMK667kUrIY7Eypha4B3qPXhnyd8zF9pS94UD2gAS7/oZFGnCpR3LYzJZFj08KPVatWm7EJfS2nL",
	"Ju4IC/ADQcr80p+MRvvwX4mlD6CZy4sijsHaaZGxZXZ4xFMQCYRt9e+jsxsjEezR0ykBtsuRCHIkZm/f",
	"PGPXKSjmtZVBmFVj1Ic7rcHr5hyR9Iq0SQIX5OlXzEOzgejIwbmai0wmS9gMa8gwWziv4Pfe09HxIUOK",
	"NSLEtIQv07jCdaLBqh+IwY20Xph+DPnaNELu+4z5XoZpxSzg3OmxE5oiz50krdPJFUPMbL1jWH7lvhxi",
	"tSP2M7LeM78OKWtre+Jl1wZ/d2r20qfOUo2WBwCwVKag4P2nw3k/cyCEFX2+FI8NMPVAsrOrnkEnNKlA",
	"ZZlgvmtmetpqL6wbjAtEUFQ7baKyo+O3fJ/SveWEcVcRP7Rk/amZ61RccxMchH3gnmio2iA+vqwboMur",
	"8qoJk1DYVjXXINN+d1VGPRr2KhMxMMEUXLdstiWtU7g2W+X96NfWm5GyUrIGMI/37fs+0HxYfXwcxDh9",
	"8uRwcfzlchACgJsYTF2KvbAzAKWHTjsY2inww1uZlCHODAjaET/340xkGXPnty6hZ9eSUuYNbdI3zN4A",
	"9jtJ6flzfzRBkQP5jvjylrvDiT+u8Kg+Hcma7asGYr3x3TwQu2RtkPR0a3fxKHX9dHRy0DhQzlKyjLQX",
	"4xaq9oXlCllb0XQ/PA/rK5Etrct90PwCKE4fEszbxF3HBHRkCUHkTXwsj4fL65LW2TD6RpEvpMhpUJqD",
	"RdQN27rdlsneG0TPn6nG+xO4r2V8azItEhbQ2s/Tqhif1zw+d8qwN7LepSv9Ip72NKHfmsP/tnQc8Frh",
	"aYYgkkW449qxCR5ATe7G9V2dgPfl3AY6F5hVV/V2PBxmOhZZqi0NhZHcua9sba7lZU0WW/1hUl1aVIoQ",
	"LkrKaMs0n7Wuk3Nlov2qvCr/DQAA//9Og8UCrh8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
