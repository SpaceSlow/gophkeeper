// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZ31PjNhD+VzRqZ/pi8uOgD81Trwfc0HYKA1yvMxzDKPYm1tWWdNI6kGH8v3ck2Uns",
	"2EkIJHDTpzCytftp99tvV+aRhjJVUoBAQweP1IQxpMz9+UEDQ7gCYTjyCVxCKHV0Cd8yMGifKy0VaOTg",
	"3o4YMvs7kjplSAd0yAXTUxpQnCqgA2pQczGmeUBTQFa+Dg8sVYl7LlMgXPj9XArChjJDYkr/RDsATQb9",
	"wiP9UcOIDugP3fmZusWBurVzXE8VnIgspXkeUA3fMq4hooMbb2sBY+BPdjtzK4dfIUTrtiVARklhHB6W",
	"JOcjOrh5EjKaB1vHtnaWFuS3eUBPtJZ6EWvVI9jH3jeYUHNlM0IHxTpJM4PEqIQjGU7Jly+amGk6lMla",
	"RIXdpmh+BPw+Q/knN6uQV/3P6Hzn6ewWOUJqnkjgOe8p05pNlxAve2qKegN4WxqbH+DOmtz6FNbXk09S",
	"uGw8jhxz8cmAbtUpxYy5t/GriE+52m+Sl8yAFiyF6pZytb+WO7P9wdz7GvBt0Uf5Lwj3x0qP/rUmH5cw",
	"5gZBv3SMNCgrhtHdG4lvE6KmeNSraikWvHqSfm9mhAuEMeg339H4zMMC0A1icV1gWB2PpnCUyXwx9M7g",
	"hpCdFQvR/d5QxaYpCDwImQ81PCAN5rIfaohAIGfJgoN5ImoOPnOMj4tEv9mWlAfUQJhpjtMri8K7YRnG",
	"9ncITIM+LZ39/vmaBn7ss1b807nvGFHR3Jq0RLb7QymQhU41IGU8sakfS93hEybkpMPxV7va0ZkNX8JD",
	"KITMk4KeSk0gykJXEY7qHF21XN2z8Rg0+ShV/AeAAk0OyLkC8f7ijBx2ejSgE9DGzyH9Tq/Ts7ulAsEU",
	"pwN62Ol1Dp0EYOwO3E2snjoGS69y1VnGyS2x4kG4IBjDousJZ6TUFcJERBaUxSbPwT+L6IBeSIPOFPXp",
	"AYO/yWhahgqEc82USrg/dPerkWI+a68rlKWWlleJgDoDt+B7hjv6u15vF/6LruQAVGN5lYUhGDPKEjKL",
	"Dg1oDCwCP0f+c3DyoLgGc/B+hKCX0xExtGpJPl1/IPcxCOKaGAG/q+RotVLsngPkTvrrxWJBHr1gHKoT",
	"c0MMzsSEJTya0aZbUoaYzHoFN7Md9fr7hBRKrSHEGX2J1HNeRxKM+AkJPHDj5PRnH6+6EbTvJ8QN70QK",
	"YkBPrNJbocnS1IrVYjnZZLCxKVuzoU6SuroYPdorshxOXqYoS2s7qsumSWrz0mwtnzJKJVtegcBcqAy9",
	"91/25/3EkhDm5fNcPlbI1ELJ9svMGBr5iZkWhjDiLipEjpaGOeIt1PnYcs0ydJfCveZqt6mMPzsPPmit",
	"kSoTU3+hLUnPyo+xi2GmNQgsmbE2VftO0zYp2mtf+UsSO07audk78M16S6oUs6obpf2UenOb327CoXX0",
	"CVoazUXCQiCMCLhf5uVS32nsLvW5fjdNZuU32LxoNxVi9nftextqvm4TexuFcfTu3f5w/G1j4AHAQwjq",
	"GUK+vjo9UVrKaRuB7z7yKPc4E0BYRnzs1glLEmJvwY2N+J5jTJyhevn63Q03+7Njd3/ULAV015abR2pv",
	"kO5OWX6GGPhPEtUpb/F2Uv8eYoNVK9KjlSPg/0fXizyuzN1qfV8xB2xDjVPAMH5NZrycUq74f8p3OFYc",
	"+ZrZG45mzpSDI492Puo48o6k3r44vEPr2/M100nxQc8Mut1EhiyJpcEuU5xaDIWt+oHOSzqY4vt1MTUX",
	"lPfXqTxYsc0BbhrdChPLj/Lb/L8AAAD//5M4xXeZHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
