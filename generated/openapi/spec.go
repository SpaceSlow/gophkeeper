// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ32/bNhD+VwhuwF4U22myh/lpXZMO2Ya1SNp1QBoUtHS22Ekkezw5MQL97wNJybZ+",
	"2E7T2u3QPcWgRN7x7vs+flTueaxzoxUosnx8z22cQi78z2cIguAKlJUk53AJscbkTJC4BGu0suBeMqgN",
	"IEnwU3KwVsz8A7gTucmAj7kt4his5RGnhfEDhFLNeFlGHOFDIRESPr5eTr5Zvqgn7yEmXkb9uVzChwIs",
	"9aVBIhEkWnnoHJhUU425IKkVExNdELP1ogz9qt0864F7/j3ClI/5d8NV0YZVxYat5F4tDJyrIu9s068V",
	"rXL8iO1uKrtMGjs9Hi2XlIpgBujW/KqLIpcRdlTmHFHj5kqAe+x/JWBjlMbtiY+rcZYXlpg1mSQ2WbC3",
	"b5HZRT7R2U5sVuv2ZfSHtPTgTi3r+i7UNbSPILcfWclVA7hAFItOxt1IvcnrmVSvLeBGLhlh7a0L2IBN",
	"PXrcB4zCAiqRt2SgHj3eWezl/GgVfUfym+pN+h9Q/sfWiOG1vhiXMJOWAD93jRCMo3jy7iupb19GffVo",
	"w/Bb1qJNC7pN+b/X3IhFDoqOYhHyhjviEZ9IJXDBIx4jJKBIimwtwFrXLMQFSlpcuS2E+oqCUvd3AgIB",
	"n/ta8TH/7c0rHoXT260Rnq4qlRIZXrolXX3d/FgrErEHM+RCZq5BM40DORdKzweSfnajAyzcTjMZQ8Wv",
	"ADz+XCODpIh9o3wHJPkmXt2K2QyQ/apN+juAAWRH7IUB9fTlBTsZjHjE54A2yPLxYDQYudnagBJG8jE/",
	"GYwGJx6ZlPoNDzNHcw80HcjXlHavAsxhmknFKIX10HMpWA13JlTC1gDvUOvTv0j4mL/UlvxSPKABLP2i",
	"k0VdKlA+tDAmk2HTw/dWq5Vl2oW+jtKWTdwRFuAHgpT5rT8ZjfYRvxJLn0CzllfBqk2LjC2rwyOegkgg",
	"HKt/H53fGYlgj55OCbDbjkSQIzF7/eoZu01BMa+tDMKsGqM+3WkNXjfniKRXpDYJXJKnn7EOTQPRU4ML",
	"NReZTJawGdaQYbZwUcGfvaej40OmFGtEiGkJX6ZxhetEg1U/EIM7ab0w/Rjq1V6E3PsZ816GacUs4Nzp",
	"sROaIs+dJK3TyTVDzGx9Ylh+494cYnUibmZkfWZ+HlLWq+2Jl30H/MOpuZE+dZVqtHwBAEtlCgrRfzpc",
	"9HMHQljR51Px2ADTBkj2uuoZ9EKTClSWCeZdM9PTjr2wbjAuEEFRHbSJyh7Hb/k+pXvLDeOhIn5oyfpT",
	"M+dUnLkJAcI58Eg0VDaIj69rA3R9U940YRIa2+nmGmS6z27KaIOGvcxEDEwwBbedNbuS1itcbau8H/3a",
	"+mWkrJSsAczjfcd+DDS/rD5+HcQ4ffLkcHn85WoQEoC7GEzdir2wMwBlA512MLRX4If3MilDnhkQdDM+",
	"8+NMZBlz97c+oWe3klLmF2rTN8xuAfuNpPTizF9NUORA3hFf33N3OfHXFR7VtyNZs31lINaNb/tC7IrV",
	"IunpVnfx7eh61cetvduu71t8wGOg8RwoTr8kMrYppY4J6MgSgsibTV/etZbfHjoXrf+ajzgNJDlYHv0g",
	"qZ2iTPbubTxapxo/hQ39bue1ybRIWMDGZlaQfoTvORMk9keNhxiqT2LFwf1T4z9s/3uojxaFk4PmgXKW",
	"kq2Z0bE2h759P80QRLIIn4J2HG8HUK6H6couA+hjubBBOgrMqi/adjwcZjoWWaotDYWR3IWv1mrv5UVN",
	"Flv9X6G621fqE74nlNGWab5qfRfMaonuo/Km/DcAAP//RRGnh2EfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
