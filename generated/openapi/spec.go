// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZb2/bthP+KgR/P2BvFNtpshfzq3VtOmQb1qJp1wGpUdDS2WInkezx5MQI9N0HkpJt",
	"WZKd/rGbontlgRLvjnfP8/BI3/FY50YrUGT5+I7bOIVc+McnCILgCpSVJBfwEmKNyUv4UIAl996gNoAk",
	"wX+dA4lEkHDPcCtykwEfc6tzYFLNNOaCpFZMTHVBzNZGGXqrPOK0NH4CoVRzXtYDd/z/CDM+5v8brgMd",
	"VlEOt4J7tTRwoYqcl2XEET4UEiHh4+tgK1rHOFn509P3EJPz17Nca7Sy0F6vTBorPR2tTEpFMAd0Nh90",
	"UuTKw57MXCBq7M8EuNf+KQEbozRuTXxcjbO8sMSsySSx6ZK9fYvMLvOpztrL24qvstsV0R/S0r0rtcrr",
	"u5DXUD6C3H5kJtcF4AJRLFsRtz11Bq/nUr22gL1cMsLaG+ewAZt69LQLGIUFVCKH5pR69HRvslfzo7X3",
	"PcH35Zv0P6D8w06P4bMuHy9hLi0BfukcIRhH8eTdA8lvV0Rd+diG4fesRX0G3aL87zU3YpmDopNYhLjh",
	"lnjEp1IJXPKIxwgJKJIi23CwUTULcYGSllduCSG/oqDU/U5BIOAznys+5r+9ecWjsGM6G+HtOlMpkeGl",
	"M+ny6+bHWpGIPZghFzJzBZprHMiFUHoxkPSzGx1g4VaayRgqfgXg8WcaGSRF7AvlKyDJF/HqRszngOxX",
	"bdLfAQwgO2HPDajHLy7Z2WDEI74AtEGWTwejwcjN1gaUMJKP+dlgNDjzyKTUL3iYOZp7oOlAvqa0exVg",
	"DtNMKkYpbLpeSMFquDOhErYBeIdaH/5lwsf8hbbkTfGABrD0i06WdapAedfCmEyGRQ/fW63Wbco+9LWU",
	"tmzijrAAPxCkzC/90Wh0CP+VWPoAmrm8KuIYrJ0VGVtlh0c8BZFA2Fb/Prm4NRLBnjyeEWC7HIkgR2L2",
	"+tUTdpOCYl5bGYRZNUZ9uLMavG7OCUmvSNskcEGef8E8NBuIjhxcqoXIZLKCzbCGDLOF8wp+7z0fnR4z",
	"pFgjQkwr+DKNa1wnGqz6gRjcSuuF6ceQr20j5L7PmO9lmFbMAi6cHjuhKfLcSdImnVwxxNzWO4blE/fl",
	"EKsdsZ+R9Z75ZUhZWzsQL7s2+PtTs5c+dZZqtHwFAEtlCgrefzqe9wsHQljT53Px2ABTDyQ7u+o5dEKT",
	"ClSWCea7ZqZnrfbCusG4QARFtdMmKjs6fssPKd07Thj3FfFjS9afmrlOxTU3wUHYBz4RDVUbxMfXdQN0",
	"PSknTZiEwraquQGZ9rtJGfVo2ItMxMAEU3DTstmWtE7h2m6VD6NfO29GykrJGsA8PbTvT4Hm19XHh0GM",
	"80ePjhfHXy4HIQC4jcHUpTgIOwNQeui0h6GdAj+8k0kZ4syAoB3xUz/ORJYxd37rEnp2Iyll3tA2fcPs",
	"LWC/kZRePvVHExQ5kO+Ir++4O5z44wqP6tORrNm+biA2G9/tA7FL1hZJz3d2F9+Prld13Fm73fq+ow/4",
	"FGg8A4rTr4mMXUqpYwI6sYQg8mbRV2et1d1D66D1rfUR56Ozo8aBcp6SZaT95t9SMR/R+VEj6oZt3bvK",
	"5ODdlufPTOPn8LO7/3ptMi0SFtDaz9OqGB/XiT0VJA5H1vu0eJ/F056O7r9O69uWjiOe0R9nCCJZhguj",
	"PZvgEdTkflzf1yZ6X85toHOBWXXvbcfDYaZjkaXa0lAYyZ37ytb2Wp7XZLHVvw/VDUClCOHWoYx2TPNZ",
	"6zqGVibar8pJ+W8AAAD//5hS1gD7HgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
