openapi: 3.0.3
info:
  title: Swagger GophKeeper - OpenAPI 3.0
  contact:
    email: igor.ivanov.it@mail.ru
  license:
    name: For education
  version: 1.0.0
servers:
  - url: https://localhost/api
tags:
  - name: users
    description: Operations about user
  - name: sensitive records
    description: Operations with sensitive records
paths:
  /register:
    post:
      tags:
        - users
      summary: Register user
      description: Register user in the GophKeeper via username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: Successful registered
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Existed username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
  /login:
    post:
      tags:
        - users
      summary: Login user
      description: Login user in the GophKeeper via username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Incorrect password or username doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
  /sensitive_record_types:
    get:
      tags:
        - sensitive records
      summary: Returns sensitive record types
      description: Returns a array of sensitive record types
      operationId: ListSensitiveRecordTypes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSensitiveRecordTypeResponse'
        '500':
          description: Internal error on server
  /sensitive_records:
    post:
      tags:
        - sensitive records
      summary: Create a new sensitive record
      description: Place a new sensitive record in the GophKeeper
      operationId: PostSensitiveRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSensitiveRecordRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSensitiveRecordResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
      security:
        - auth: []
    get:
      tags:
        - sensitive records
      summary: Returns sensitive records
      description: Returns a array of sensitive records of current user
      operationId: ListSensitiveRecords
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSensitiveRecordResponse'
        '401':
          description: No authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
      security:
        - auth: []
  /sensitive_records/{id}:
    get:
      tags:
        - sensitive records
      summary: Returns data for sensitive record with {id}
      description: Return data of sensitive record with {id}
      operationId: FetchSensitiveRecordWithID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSensitiveRecordResponse'
        '401':
          description: No authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No sensitive record with current id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
      security:
        - auth: []
    delete:
      tags:
        - sensitive records
      summary: Delete sensitive record with {id}
      description: Delete all data of sensitive record with {id}
      operationId: DeleteSensitiveRecordWithID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful operation
        '401':
          description: No authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error on server
      security:
        - auth: []
components:
  schemas:
    # requests/responses
    RegisterUserRequest:
      type: object
      required:
        - username
        - password
        - repeated_password
      properties:
        username:
          type: string
          example: username1
        password:
          type: string
          example: password1
        repeated_password:
          type: string
          example: password1
    LoginUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: username1
        password:
          type: string
          example: password1
    LoginUserResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ListSensitiveRecordTypeResponse:
      type: object
      required:
        - sensitive_record_types
      properties:
        sensitive_record_types:
          type: array
          items:
            $ref: '#/components/schemas/SensitiveRecordType'
    ListSensitiveRecordResponse:
      type: object
      required:
        - sensitive_records
      properties:
        sensitive_records:
          type: array
          items:
            $ref: '#/components/schemas/SensitiveRecord'
    CreateSensitiveRecordRequest:
      type: object
      required:
        - type
        - metadata
        - data
      properties:
        type:
          $ref: '#/components/schemas/SensitiveRecordTypeEnum'
        metadata:
          type: string
          example: some information about sensitive record
        data:
          type: string
          format: binary
    CreateSensitiveRecordResponse:
      $ref: '#/components/schemas/SensitiveRecordWithData'
    GetSensitiveRecordResponse:
      $ref: '#/components/schemas/SensitiveRecordWithData'
    ErrorResponse:
      type: object
      required:
        - errors
      properties:
        errors:
          type: string
          description: errors must split by \r symbol
    # models
    SensitiveRecordType:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          $ref: '#/components/schemas/SensitiveRecordTypeEnum'
    SensitiveRecord:
      type: object
      required:
        - id
        - type
        - metadata
      properties:
        id:
          type: integer
          example: 10
        type:
          $ref: '#/components/schemas/SensitiveRecordTypeEnum'
        metadata:
          type: string
          example: some information about sensitive record
    SensitiveRecordWithData:
      allOf:
        - $ref: '#/components/schemas/SensitiveRecord'
        - type: object
          required:
            - data
          properties:
            data:
              type: string
              format: binary
    # Enums and etc
    SensitiveRecordTypeEnum:
      type: string
      enum:
        - payment-card
        - text
        - binary
        - credential
  # security schemes
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
